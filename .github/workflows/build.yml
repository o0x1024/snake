name: Cross-Platform Build

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  CARGO_INCREMENTAL: 0
  RUST_BACKTRACE: short

jobs:
  build:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
            arch: 'x64'
            os: 'macos'
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
            arch: 'arm64'
            os: 'macos'
          - platform: 'ubuntu-22.04'
            args: '--target x86_64-unknown-linux-gnu'
            arch: 'x64'
            os: 'linux'
          - platform: 'windows-latest'
            args: '--target x86_64-pc-windows-msvc'
            arch: 'x64'
            os: 'windows'

    runs-on: ${{ matrix.platform }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (Ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || matrix.platform == 'ubuntu-22.04' && 'x86_64-unknown-linux-gnu' || 'x86_64-pc-windows-msvc' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: src-tauri

      - name: Sync node version and setup cache
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'

      - name: Install frontend dependencies
        run: |
          rm -rf node_modules package-lock.json yarn.lock
          npm install --force

      - name: Import Apple Developer Certificate
        if: matrix.os == 'macos'
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
        run: |
          echo $APPLE_CERTIFICATE | base64 -d > certificate.p12
          security create-keychain -p "action" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "action" build.keychain
          security set-keychain-settings build.keychain
          security import certificate.p12 -k build.keychain -P $APPLE_CERTIFICATE_PASSWORD -T /usr/bin/codesign -T /usr/bin/security
          security set-key-partition-list -S apple-tool:,apple: -s build.keychain -p "action"
          security list-keychains -s build.keychain

      - name: Build the app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        with:
          args: ${{ matrix.args }}
          tagName: v__VERSION__
          releaseName: 'Security Assessment Platform v__VERSION__'
          releaseBody: 'See the assets to download and install this version.'
          releaseDraft: true
          prerelease: false
          includeDebug: false

  universal-macos:
    runs-on: macos-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download x64 artifact
        uses: actions/download-artifact@v4
        with:
          name: Security Assessment Platform-x64-macos
          path: ./x64

      - name: Download arm64 artifact
        uses: actions/download-artifact@v4
        with:
          name: Security Assessment Platform-arm64-macos
          path: ./arm64

      - name: Create universal binary
        run: |
          mkdir -p ./universal
          lipo -create -output ./universal/Security Assessment Platform \
            ./x64/Security Assessment Platform \
            ./arm64/Security Assessment Platform

      - name: Upload universal binary
        uses: actions/upload-artifact@v4
        with:
          name: Security Assessment Platform-universal-macos
          path: ./universal/Security Assessment Platform